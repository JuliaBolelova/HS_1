export interface LoaderConfig {
    delay: number;
    closeDelay: number;
    initDelay: number;
    loaderElement: HTMLElement | string;
    classActive: string;
}
export interface LoaderCallOptions {
    skipDelays: boolean;
}
declare type LoaderPromise = Promise<unknown>;
export default class Loader {
    private loaderPromises;
    private config;
    private el;
    private suppressOnInit;
    private initSuppressTimeout;
    private timeout;
    private closingTimeout;
    protected loaderShows: boolean;
    private loaderShownResolver?;
    private promisesForShownLoader;
    currentLoadingPromise: Promise<LoaderPromise[]>;
    constructor(cfg?: Partial<LoaderConfig>);
    private setCurrentLoadingPromise;
    loader<T>(promise: Promise<T>, options?: Partial<LoaderCallOptions>): Promise<T>;
    wrapFunction<C, A extends never[], R>(fnc: (this: C, ...args: A) => Promise<R>, options?: Partial<LoaderCallOptions>): (this: C, ...args: A) => Promise<R>;
    decorator(options?: Partial<LoaderCallOptions>): MethodDecorator;
}
export {};
